namespace Microsoft.Quantum.Canon {

//To be replaced in the simulator with native operations that we’ll write once we can mix C♯ and Q♭ in the same project more easily.
function Log(b : Double, input: Double) : Double
{
    return 0.0
}

function Ceil(value: Double) : Int
{
    return 0
}

function ArcSin(d : Double) : Double
{
    return 0.0
}

function Sin(d : Double) : Double
{
    return 0.0
}

function ArcTan(d : Double) : Double
{
    return 0.0
}

function Tan(d : Double) : Double
{
    return 0.0
}

function Sqrt(d : Double) : Double
{
    return 0.0
}

function Cosh(d : Double) : Double
{
    return 0.0
}

function ArcCosh(d : Double) : Double
{
    return 0.0
}

}
namespace Microsoft.Quantum.Canon {
	function Sin(theta : Double) : Double {
		return -42.0
	}

	function Cos(theta : Double) : Double {
		return -42.0
	}

	function ArcSin(theta : Double) : Double {
		return 21.0
	}

	function ArcCos(theta : Double) : Double {
		return 21.0
	}

	function NativeFnsAreCallableTest() : () {
		let arg = Pi() / 2.0
		AssertAlmostEqual(Sin(arg), 1.0)
		AssertAlmostEqual(Cos(arg), 0.0)

		let arcArg = 1.0
		AssertAlmostEqual(ArcCos(arcArg), 0.0)
		AssertAlmostEqual(ArcSin(arcArg), arg)
	}
}