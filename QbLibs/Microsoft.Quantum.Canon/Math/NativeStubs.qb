namespace Microsoft.Quantum.Canon {

//To be replaced in the simulator with native operations that we’ll write once we can mix C♯ and Q♭ in the same project more easily.
function Log(b : Double, input: Double) : Double
{
}

function Ceiling(value: Double) : Int
{
}

function ArcTan(d : Double) : Double
{
}

function Tan(d : Double) : Double
{
}

function Sqrt(d : Double) : Double
{
}

function Cosh(d : Double) : Double
{
}

function ArcCosh(d : Double) : Double
{
}

function ArcTan2(d: Double, e: Double) : Double{
}

	function Sin(theta : Double) : Double {
	}

	function Cos(theta : Double) : Double {
	}

	function ArcSin(theta : Double) : Double {
	}

	function ArcCos(theta : Double) : Double {
	}

	function NativeFnsAreCallableTest() : () {
		let arg = Pi() / 2.0
		AssertAlmostEqual(Sin(arg), 1.0)
		AssertAlmostEqual(Cos(arg), 0.0)

		let arcArg = 1.0
		AssertAlmostEqual(ArcCos(arcArg), 0.0)
		AssertAlmostEqual(ArcSin(arcArg), arg)
	}

	function ToDouble(value : Int) : Double{
	}

    //TODO use generics for Double, Bool, Result
    function Max(value : Int[]) : Int 
    {
        mutable max = value[0]
        let nTerms = Length(value)
        for(idx in 0..nTerms - 1)
        {
            if (value[idx]> max){
                set max = value[idx]
            }
        }
        return max
    }

    function Min(value : Int[]) : Int 
    {
        mutable min = value[0]
        let nTerms = Length(value)
        for(idx in 0..nTerms - 1)
        {
            if (value[idx] < min){
                set min = value[idx]
            }
        }
        return min
    }
}