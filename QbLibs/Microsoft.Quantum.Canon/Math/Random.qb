namespace Microsoft.Quantum.Canon {

//Generates a random number uniformly sampled in [0, 2^maxBits-1]
function randomIntPow2 (maxBits : Int) : Int
{
   mutable number = 0
  for( idxBit in 0..maxBits -1){
        set number = number + (Random([0.5;0.5])) * 2 ^ idxBit
    }
    return number    
}

//Generates a random number uniformly sampled in [0, maxInt)
function randomInt (maxInt : Int) : Int
{
	mutable nBits = 0
	mutable output = 0
	//set nBits = Float(maxInt)
	set nBits = Ceil(Log(2.0,Float(maxInt)))
	
	// Should use repeat until success when implemented
	for( samples in 0..100 ){
		set output = randomIntPow2(nBits)
		if(output < maxInt){
			return output
		}
	}

	return output / 2

}

}