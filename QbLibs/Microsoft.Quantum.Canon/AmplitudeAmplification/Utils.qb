// Functions here may be commonly used in other libraries and could be made global.


function Pi() : Double {
	return 3.141592653589793238462643383280
}

//Generates a random number uniformly sampled in [0, 2^maxBits-1]
function randomIntPow2 (maxBits : Int) : Int
{
   mutable number = 0
  for( idxBit in 0..maxBits -1){
        set number = number + (Random([0.5;0.5])) * 2 ^ idxBit
    }
    return number    
}

//Generates a random number uniformly sampled in [0, maxInt)
function randomInt (maxInt : Int) : Int
{
	mutable nBits = 0
	mutable output = 0
	//set nBits = Float(maxInt)
	set nBits = Ceil(Log(2.0,Float(maxInt)))
	
	// Should use repeat until success when implemented
	for( samples in 0..100 ){
		set output = randomIntPow2(nBits)
		if(output < maxInt){
			return output
		}
	}

	return output / 2

}


// Phase shift about |1...1><1...1|
operation ReflectionAllOnes( phase: Double, qubits: Qubit[] ) : ()
{
	Body{
		let nQubits = Length(qubits)
		let qubitFlag = qubits[0]
		let qubitsSystem = qubits[1..nQubits-1]

		(Controlled R1(phase, _))(qubitsSystem, qubitFlag)

	}

	Adjoint auto
    Controlled auto
    Controlled Adjoint auto
}

// Phase shift about |0...0><0...0|
operation ReflectionAllZero( phase: Double, qubits: Qubit[] ) : ()
{
	Body {

		WithAC(ApplyToEachAC(X, _), ReflectionAllOnes(phase, _), qubits)

	}

	Adjoint auto
    Controlled auto
    Controlled Adjoint auto
}


