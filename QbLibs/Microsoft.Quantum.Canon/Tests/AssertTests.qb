namespace Microsoft.Quantum.Canon {
	open Microsoft.Quantum.Primitive

	// This file contains very simple tests that should trivially pass
	// with the intent of testing the assert and testing harness mechanisms themselves.

	operation EmptyTest() : () {
		Body {
	
		}
	}

	operation PreparationTest () : () {
		Body {
		//    using (qubits = Qubit[1]) {
		//        AssertProb([Zpauli], [qubits[0]], Zero, 1.0, "Freshly prepared qubit was not in |0〉 state.", 1e-10)
		//    }
		}
	}

	operation OperationTestShouldFail() : () {
		Body {
			fail "OK"
		}
	}

	function FunctionTestShouldFail() : () {
		fail "OK"
	}

	function AssertEqualTestShouldFail() : () {
		AssertAlmostEqual(1.0, 0.0)
	}

	/// summary:
	///     Tests whether common builtin operations are self adjoint.
	///     These tests are already performed in Solid itself, such that
	///     this operation tests whether we can reproduce that using our
	///     operation equality assertions.
	operation SelfAdjointOperationsTest() : () {
		Body {
			let ops = [I; X; Y; Z; H]
			for (idxOp in 0..Length(ops) - 1) {
				AssertOperationsEqualReferenced(ApplyToEach(ops[idxOp], _), ApplyToEachA(ops[idxOp], _), 3)
				// FIXME: #780.
				// let arr = [ops[idxOp]; Adjoint ops[idxOp]]
				// AssertOperationsEqualReferenced(ApplyToEach(Bind1A(arr), _), ApplyToEachA(I, _), 3)
			}
		}
	}
}