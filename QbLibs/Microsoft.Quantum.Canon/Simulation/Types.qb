// namespace Microsoft.Quantum.Canon

/// summary:
///     Represents a set of gates that can be readily implemented and used
///     to implement simulation algorithms. Each set is described by a function
///     from integers to operations parameterized by a real number representing
///     time and a vectors of real numbers representing other generator parameters.
///     For instance, a function representing the use of Pauli rotations to
///     decompose simulations might map the integer 3 to
///     `(params, time, qubits) => Rz(time, qubits)`, with the `params` field
///     being ignored, while another gate set might use `params` to indicate
///     application of gates such as exp(-i [X cos φ + Y sin φ] t).
newtype GateSet = (Int -> ((Double[], Double, Qubit[]) => () : Adjoint, Controlled))

/// summary:
///     Represents a single term in the expansion of a dynamical generator
///     such as a Hamiltonian. The first element of each term is an integer
///     label into a `GateSet`, while the second element is an array of
///     indexes on which the given term acts, and the final argument is the set
///     of real numbers parameterizing the application of the corresponding
///     operation.
///
///     From the view of a GeneratorTerm, a Hamiltonian is an operation of
///     the form (Double, Qubit[]) => () that applies $e^{-i H t}$ to the
///     state of a given register.
// FIXME: unify this and the GateSet representation above with ContinousOracle.
newtype GeneratorTerm = (Int, Int[], Double[])

/// summary:
///     Represents a dynamical generator as a set of simulatable gates and
///     an expansion in terms of that basis.
newtype DynamicalGenerator = (GateSet, GeneratorTerm[])

// NB: This type should likely only be used internally, and represents a
//     sequence of timeslices such as generated by Trotterizaiton.
//     We can't represent this as a DynamicalGenerator[], due not knowing
//     which of the parameters represent rescaling each gate.
//     We solve this by packing a new double in indicating how long
//     to evolve for, instead of representing the coefficient and time
//     separately.
newtype GeneratorSequence = (GateSet, (Int, Int[], Double, Double[])[])
