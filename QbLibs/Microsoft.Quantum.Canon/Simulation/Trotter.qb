namespace Microsoft.Quantum.Canon {
    // FIXME: the names of these functions are not compliant with the style guide.
    // FIXME: define recursively instead of special casing to first, second, and fourth.
    operation Trotter1ImplCA<'T>(op : ((Int, Double, 'T) => () : Adjoint, Controlled), nSteps : Int, stepSize : Double, target : 'T) : () {
        Body {
            IterRangeCA(op(_, stepSize, target), 0..(nSteps - 1))
        }
    }
    operation Trotter2ImplCA<'T>(op : ((Int, Double, 'T) => () : Adjoint, Controlled), nSteps : Int, stepSize : Double, target : 'T) : () {
        Body {
            IterRangeCA(op(_, stepSize * 0.5, target), 0..(nSteps - 1))
            IterRangeCA(op(_, stepSize * 0.5, target), (nSteps - 1)..-1..0)
        }
    }
    function TrotterCA<'T>(op : ((Int, Double, 'T) => () : Adjoint, Controlled), nSteps : Int, order : Int) : ((Double, 'T) => ()) {
        if (order == 1) {
            return Trotter1ImplCA(op, nSteps, _, _)
        } elif (order == 2) {
            return Trotter2ImplCA(op, nSteps, _, _)
        } else {
            fail "Order $order not yet supported."
        }
        // FIXME: needed so we have a return value of the right type in all cases, but
        //        this line is unreachable and should be removed.
        return Trotter1ImplCA(op, nSteps, _, _)
    }
    // TODO: write variants of the above that do not assume adjoint and controlled.
}