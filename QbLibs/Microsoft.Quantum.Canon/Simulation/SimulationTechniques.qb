namespace Microsoft.Quantum.Canon {
    
    /// Convert the description of dynamics in the Hamiltonian to a form compatible with the Trotterization library
    operation _TrotterStep(evolutionGenerator: EvolutionGenerator, idx : Int, stepsize: Double, qubits: Qubit[]) : () {
        Body{
            let (evolutionSet, generatorSystem) = evolutionGenerator
            let (nTerms, generatorSystemFunction) = generatorSystem
            let (generatorIndex, coefficient) = generatorSystemFunction(idx)
            (evolutionSet(generatorIndex))(coefficient * stepsize, qubits)
        }
        Adjoint auto
        Controlled auto
        Controlled Adjoint auto
    }
    function TrotterStep(evolutionGenerator: EvolutionGenerator, trotterOrder: Int, trotterStepSize: Double) : (Qubit[] => () :  Adjoint, Controlled)
    {
        let (evolutionSet, generatorSystem) = evolutionGenerator
        let (nTerms, generatorSystemFunction) = generatorSystem
        let trotterForm = (nTerms, _TrotterStep(evolutionGenerator, _, _, _))
        return (DecomposeIntoTimeStepsCA(trotterForm,trotterOrder))(trotterStepSize, _)
    }


    //Applies a sequence of TrotterStep according to a schedule, e.g. for adiabatic state preparation
    operation Schedule(evolutionUnitaryTimeDependent : EvolutionUnitaryTimeDependent, timeSteps : Int, qubits: Qubit[]) : (){
        Body{
            let timeStep = Float(1) / Float(timeSteps)
            for(idxStep in 0..timeSteps - 1){
                let time = timeStep * Float(idxStep) 
                evolutionUnitaryTimeDependent(time, timeStep, qubits)
            }
        }
    }

//For LCU

}

