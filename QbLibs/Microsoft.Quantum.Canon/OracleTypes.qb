/// <summary>
///     Represents a discrete-time oracle U^m for a fixed operation U
///     and a non-negative integer m.
/// </summary>
newtype ((Int, Qubit[]) => () : Adjoint, Controlled) DiscreteOracle

/// <summary>
///     Represents a continuous-time oracle U(δt) : |ψ(t)〉 ↦ |ψ(t + δt)〉 for all times t,
///     where U is a fixed operation, and where and δt is a non-negative real number.
/// </summary>
newtype ((Double, Qubit[]) => () : Adjoint, Controlled) ContinuousOracle

// FIXME: Need a better name for this.
/// <summary>
///      Given an operation representing a "black-box" oracle, implements
///      a discrete-time oracle by repeating the given oracle multiple times.
///      For example, OracleToDiscrete(U)(3, target) is equivalent to U(target)
///      repeated three times.
/// </summary>
/// <param name="blackBoxOracle">"Black-box" oracle to perform powers of as
///     a discrete-time oracle.</param>
operation (DiscreteOracle) OracleToDiscrete(((Qubit[]) => () : Adjoint, Controlled) blackBoxOracle) {
    Body {
        let oracle = DiscreteOracle(OperationPowImplAC(blackBoxOracle, _, _))
        return oracle
    }
}
